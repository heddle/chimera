package cnuphys.chimera.grid;

import java.util.Arrays;

public class TestGrid {

	public static ChimeraGrid primaryTestGrid() {
//		double[] xgrid = { -46.8391, -43.8807, -41.1116, -38.5197, -36.0938, -33.8233, -31.6980, -29.7089, -27.8470,
//				-26.1044, -24.4733, -22.9467, -21.5178, -20.1803, -18.9285, -17.7568, -16.6602, -15.6337, -14.6729,
//				-13.7737, -12.9320, -12.1443, -11.4069, -10.7167, -10.0708, -9.4662, -8.9003, -8.3706, -7.8748, -7.4108,
//				-6.9765, -6.5700, -6.1895, -5.8333, -5.5000, -5.1667, -4.8333, -4.5000, -4.1667, -3.8333, -3.5000,
//				-3.1667, -2.8333, -2.5000, -2.1667, -1.8333, -1.5000, -1.1667, -0.8333, -0.5000, -0.1667, 0.1667,
//				0.5000, 0.8333, 1.1667, 1.5000, 1.8333, 2.1667, 2.5000, 2.8333, 3.1667, 3.5000, 3.8333, 4.1667, 4.5000,
//				4.8333, 5.1667, 5.5000, 5.8333, 6.1895, 6.5700, 6.9765, 7.4108, 7.8748, 8.3706, 8.9003, 9.4662, 10.0708,
//				10.7167, 11.4069, 12.1443, 12.9320, 13.7737, 14.6729, 15.6337, 16.6602, 17.7568, 18.9285, 20.1803,
//				21.5178, 22.9467, 24.4733, 26.1044, 27.8470, 29.7089, 31.6980, 33.8233, 36.0938, 38.5197, 41.1116,
//				43.8807, 46.8391, 50.0000 };
//
//
//		double[] ygrid = { -28.6998, -27.4635, -26.2880, -25.1703, -24.1076, -23.0971, -22.1362, -21.2226, -20.3540,
//				-19.5280, -18.7426, -17.9959, -17.2858, -16.6107, -15.9687, -15.3584, -14.7780, -14.2261, -13.7014,
//				-13.2025, -12.7281, -12.2771, -11.8482, -11.4404, -11.0526, -10.6839, -10.3333, -10.0000, -9.6667,
//				-9.3333, -9.0000, -8.6667, -8.3333, -8.0000, -7.6667, -7.3333, -7.0000, -6.6667, -6.3333, -6.0000,
//				-5.6667, -5.3333, -5.0000, -4.6667, -4.3333, -4.0000, -3.6667, -3.3333, -3.0000, -2.6667, -2.3333,
//				-2.0000, -1.6667, -1.3333, -1.0000, -0.6667, -0.3333, 0.0000, 0.3333, 0.6667, 1.0000, 1.3333, 1.6667,
//				2.0000, 2.3333, 2.6667, 3.0000, 3.3333, 3.6667, 4.0000, 4.3333, 4.6667, 5.0000, 5.3333, 5.6803, 6.0416,
//				6.4177, 6.8092, 7.2168, 7.6411, 8.0828, 8.5426, 9.0213, 9.5197, 10.0385, 10.5785, 11.1408, 11.7261,
//				12.3355, 12.9698, 13.6302, 14.3177, 15.0334, 15.7784, 16.5540, 17.3615, 18.2021, 19.0772, 19.9882,
//				20.9366, 21.9239, 22.9517, 24.0217, 25.1356, 26.2952, 27.5024, 28.7591, 30.0674, 31.4294, 32.8473,
//				34.3233, 35.8600, 37.4597, 39.1250, 40.8587, 42.6635, 44.5424, 46.4983, 48.5346, 50.6544, 52.8612,
//				55.1585, 57.5501, 60.0399, 62.6318, 65.3301, 68.1391, 71.0634, 74.1076, 77.2768, 80.5761, 84.0107,
//				87.5863, 91.3086, 95.1837, 99.2178, 103.4174, 107.7893, 112.3407, 117.0788, 122.0113, 127.1463,
//				132.4920, 138.0570, 143.8504, 149.8815, 156.1602, 162.6964, 169.5009, 176.5846, 183.9591, 191.6361,
//				199.6281, 207.9481, 216.6095, 225.6264, 235.0133, 244.7853, 254.9584, 265.5489, 276.5740, 288.0515,
//				300.0000 };
		
		
		
		double[] xgrid = {
				-5.5000, -5.1667, -4.8333, -4.5000, -4.1667, -3.8333, -3.5000,
				-3.1667, -2.8333, -2.5000, -2.1667, -1.8333, -1.5000, -1.1667, -0.8333, -0.5000, -0.1667, 0.1667,
				0.5000, 0.8333, 1.1667, 1.5000, 1.8333, 2.1667, 2.5000, 2.8333, 3.1667, 3.5000, 3.8333, 4.1667, 4.5000,
				4.8333, 5.1667, 5.5000};
		
		double[] ygrid = {
				-5.6667, -5.3333, -5.0000, -4.6667, -4.3333, -4.0000, -3.6667, -3.3333, -3.0000, -2.6667, -2.3333,
				-2.0000, -1.6667, -1.3333, -1.0000, -0.6667, -0.3333, 0.0000, 0.3333, 0.6667, 1.0000, 1.3333, 1.6667,
				2.0000, 2.3333, 2.6667, 3.0000, 3.3333, 3.6667, 4.0000, 4.3333, 4.6667, 5.0000, 5.3333, 5.6803};

		
		double[] zgrid = Arrays.copyOf(xgrid, xgrid.length);

		double[] thetagrid = { 0.0, 0.0262, 0.0785, 0.1287, 0.1767, 0.2226, 0.2666, 0.3087, 0.3491, 0.3894, 0.4297,
				0.4701, 0.5104, 0.5507, 0.5910, 0.6377, 0.6917, 0.7541, 0.8264, 0.9099, 1.0066, 1.1185, 1.2479, 1.3976,
				1.5708, 1.7440, 1.8937, 2.0231, 2.1350, 2.2317, 2.3152, 2.3875, 2.4499, 2.5039, 2.5506, 2.5909, 2.6312,
				2.6715, 2.7119, 2.7522, 2.7925, 2.8329, 2.8750, 2.9190, 2.9649, 3.0129, 3.0631, 3.1154, Math.PI };

		int numPoints = 33;
		double[] phigrid = new double[numPoints];
		double start = -Math.PI;
		double end = Math.PI;
		double step = (end - start) / (numPoints - 1); // step size

		for (int i = 0; i < numPoints; i++) {
			phigrid[i] = start + i * step;
		}
		
		double radius = 4.60993;
		double alpha = 0;
		double beta = 0;
		
		CartesianGrid cartGrid = new CartesianGrid(xgrid, ygrid, zgrid, 0, 0, 0);
		SphericalGrid sphereGrid = new SphericalGrid(thetagrid, phigrid, radius, alpha, beta);
		
		return new ChimeraGrid(cartGrid, sphereGrid);

	}
}
